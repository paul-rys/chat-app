import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'

import React, { useEffect, useState, useMemo } from 'react';
import { useRouter } from 'next/router';
import firebase from '../../firebase/index';
import { Autocomplete, TextField, CircularProgress} from '@mui/material';
import moment from 'moment';
import { eq, throttle } from 'lodash';
import { DataGrid } from '@mui/x-data-grid';


// 3:11:50 in training video
// test
export default function Dashboard() {
  const router = useRouter();
  const [data, setData] = useState([]);
  const [refresh, setRefresh] = useState(Math.random());
  const [message, setMessage] = useState("");
  const [currUID, setCurrUID] = useState(null);
  const [user, setUser] = useState("")
  const { query }= router;

  console.log({query});


  useEffect(() => {
      firebase().auth.onAuthStateChanged((user) => {
        if (user) {
          setCurrUID(user.uid);
        }});
    }, [])
  
  const getData = async () => {
    const {db, ref, get, child, orderByChild, equalTo, limitToLast} = firebase();

    const dbRef = ref(db);
    
    const getVal = await get(child(dbRef, `messages/${query.id}`));
    
    const extractVal = getVal.val();
    
    const formattedData = Object.entries(extractVal).map(a => ({
      id: a[0],
      ...a[1],
    }))
    
    setData(formattedData);
  }

  const getUser = async (a) => {
    const {db, ref, get, child} = firebase();
    const dbRef = ref(db);
    const getVal = await get(child(dbRef, "users/" + a))
    const retrievedUser = getVal.val();

    setUser(retrievedUser.fullName);
  }
  
  useEffect(() => {
    if (currUID) {
      getUser(currUID);
      getData()
    };
  }, [currUID, refresh])

  return (
    <div className={styles.container}>
      <Head>
        <title>Hello World</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        <h1 className={styles.title}>
          Welcome to Create Group Chat Screen {query.gcTitle}
        </h1>

        {
          data.map((a) => (
            <div style = {{
              display: 'flex', 
              width: '50%', 
            }}>
              <p> {`${user}: `}</p>
              <p> {`${a.message}`}</p>
            </div>
            ))
        }
        
        

        <TextField
          id = "messageInput"
          label = "send message"
          variant = "outlined"
          value = {message}
          onChange = {(e) => {
            setMessage(e.target.value);
          }}
        />
        
        <button style={{padding: 20}} 
          onClick = {async () => {
            if (message !== "") {
              const {db, ref, set} = firebase();
              const id = `${moment().valueOf()}`
              const msgId = `msg-${id}`


              await set(ref(db, `messages/${query.id}/${msgId}`),
              {
                senderId: currUID,
                message: message,
              })
              
              setMessage("");
              setRefresh(Math.random());
            } else {
              alert("compose")
            }
        }}>
            <h1>Send Message</h1>
        </button>

      </main>
    </div>
  )
}
